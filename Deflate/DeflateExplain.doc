Deflate is a lossless compressed data format. It was created for PKZIP, a file archiving program that introduced the ZIP file format that exists on all modern computers today. Both PKZIP and Deflate were written and developed by Phil Katz. Deflate came to be alongside the second version of PKZIP in 1993. Deflate later became the outline for the standard ZIP. In 1996, Peter Deutsch specified Deflate in the Request for Comments (RFC) 1951, a type of text document in the communications technology field. Despite Deflate streams being patented by PKWare, Inc. in 1990, many found workarounds for the patent and created programs such as gzip, PNG, and zlib. The PKWare patent on Deflate is now expired. The most recent version of Deflate is Deflate64, which is essentially the same algorithm, but now with support for 64-bit data.

Deflate was created by combining and optimizing two of the popular compression algorithms at the time. Those were LZ77 (LZ1) and Huffman Coding. This combination works so well that Deflate is still being widely used today, most notably across Windows machines via WinZip. LZ77 and Huffman are like the parents of compression, with Morse Code being the grandparent. Almost all modern compression algorithms from Deflate to LZMA are descendants of LZ77 and Huffman.

Like its children, Huffman Coding is a lossless data compression algorithm. The primary goal of Huffman is to decrease the bit-length of the data stream. It was developed by David Huffman while he was a student at MIT in 1951. At first, Huffman was having some difficulties with a term-end assignment, given by his professor. The assignment asked Huffman to look for the most efficient binary code. After a couple months of struggle, Huffman had a eureka moment. He realized that there are limited numbers of unique characters in a data stream, and that most characters appear multiple times. He can find the most efficient code by reducing the number of bits taken by each character. He came up with the frequency-sorted binary tree and the tree is built from the bottom up. By counting the occurrence of each character as well as the number of unique characters in the data stream, Huffman can then assign unique binary code to each character, effectively reducing the total number of bits.

Like Huffman and Deflate, LZ77 too is a lossless compression algorithm. LZ77, a.k.a. LZ1, was created by Abraham Lempel and Jacob Ziv in 1977, which identifies the optimal way to tokenize a stream. Unlike Huffman Coding, instead of reducing the number of bits taken up by each character, LZ77 aims to eliminate duplicate codes. This reduces the length of the data stream as less characters mean fewer binary codes. LZ77 keeps track of a portion of the data stream and tries to match each subsequent character. If a match is found, the matched characters are not encoded, but rather, a reference to a previous instance is encoded along with the first character after the matched string. The length of the data that the algorithm keeps track of will be discussed with more details in a later section. Adding a reference to get rid of a match may seem counter intuitive, as the matched string is just being replaced with another string, but it really does work. Since the length of the buffer that the algorithm keeps track off is relatively long, and the potential matched string in a typical file is long as well, the matched (could be as long as the length of the buffer) is replaced with a two-character-reference, saving plenty of space. There hasnâ€™t been another algorithm in 30 years that has been able to replace LZ77 and LZ78.

Deflate can be used to compress any file, ranging from texts to images and videos. To keep it simple, we will only be focusing of the basic text compression. The codes provided below only support text compression right now, but they can be updated to support other file formats with a little editing.