The first half of Deflate is LZ77. LZ77 or LZ1 is a lossless data compression algorithm created by Abraham Lempel (L) and Jacob Ziv (Z) in 1977 (77). The main goal of LZ77 is to find repeats in given data and it works by using a sliding window during compression. The window is split up into two parts, the Search Buffer (SB) and the Look Ahead Buffer (LAB).

The Search Buffer contains all the symbols that we have seen pass through the LAB and have been processed. It keeps track of this information in order to make matches which are then used to compress the input. The LAB contains symbols that we have not yet seen. Both sizes of the SB and the LAB can be determined by the user and added together they make up the size of the sliding window. The average size of the SB is 8192 bits (1.024 kilobytes) and the average size of the LAB is 10 to 20 bits. 

The window usually will not fit over the entire input string and therefore “slides” over the input string moving over one symbol at a time, and hence a sliding window.

The way that LZ77 encodes is that the encoder will read a symbol from the LAB and attempt to find a match for it in the SB. If the symbol is found, then the encoder will read more symbols from the LAB buffer and continue searching backwards in the search buffer until it finds the longest match. When a match is finally found the encoder will produce a token.

The token produced is composed of 3 parts. An offset, a length, and the next token in the stream. It will usually be represented like <Offset, Length of the Match, Next Symbol>.  The Offset is how far into the SB the match is for the current symbol in the LAB. So, if you have the symbol ‘a’ and we have seen the value ‘a’ already, let’s say 3 symbols ago, then the offset will be 3. The length of the match is the total length of the matched string of values. So, if it matches for ‘alongstring’ then the length is 11. The next symbol is just the next symbol in the LAB. If no match is found, then a zero is placed in the offset and the length.
	
For demonstration purpose, the example below had been simplified so that the size of the search buffer is 11 Bytes and the length of the Look-Ahead Buffer is 6 Bytes. The original string consists of 26 characters. This means that it is 28 characters * 8 bits/ASCII character = 224 bits in length. The compressed string has 48 characters, 384 bits in length. LZ77 and most other compression algorithms do work too well with short strings/files. They work best with non-random, large data files.